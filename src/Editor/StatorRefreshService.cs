using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using UnityEditor;
using UnityEditor.Compilation;
using UnityEngine;

namespace Stator.Editor
{
    public class StatorRefreshService
    {
        public const string CONFIG_NAME = ".stator";

        public string PathToGenerate { get; set; }
        public bool EnableDebugging { get; set; }
        public bool DisabledAutoRefreshing { get; set; }

        public string AutoGeneratedFolder { get; set; }

        [InitializeOnLoadMethod]
        public static void Init()
        {
            var service = new StatorRefreshService();
            CompilationPipeline.assemblyCompilationFinished += service.OnFinishedCompilation;
            service.Refresh();
        }

        public StatorRefreshService()
        {
            AutoGeneratedFolder = "stator_builders";

            var configPath = Path.Combine(Application.dataPath, "..", CONFIG_NAME);
            if(File.Exists(configPath))
            {
                var configs = File.ReadAllLines(configPath)
                    .Where(l => !string.IsNullOrWhiteSpace(l))
                    .Select(l => l.Split(new []{'='}, StringSplitOptions.RemoveEmptyEntries).Select(s => s.Trim()).ToArray())
                    .Where(l => l.Count() == 2)
                    .ToDictionary(l => l[0], l => l[1]);
                
                if(configs.TryGetValue(nameof(AutoGeneratedFolder), out var _autoGeneratedFolder))
                {
                    AutoGeneratedFolder = _autoGeneratedFolder;
                }

                if(configs.TryGetValue(nameof(EnableDebugging), out var _enableDebugging) && bool.TryParse(_enableDebugging, out var enabledDebugging))
                {
                    EnableDebugging = enabledDebugging;
                }

                if(configs.TryGetValue(nameof(DisabledAutoRefreshing), out var _dar) && bool.TryParse(_enableDebugging, out var _value_dar))
                {
                    DisabledAutoRefreshing = _value_dar;
                }
            }

            PathToGenerate = Path.Combine(Application.dataPath, AutoGeneratedFolder);
        }

        private void OnFinishedCompilation(string assembly, CompilerMessage[] messages)
        {
            DebugInfo($"Begin check for problem generated files");
            foreach (var message in messages)
            {
                if (message.type != CompilerMessageType.Error)
                {
                    continue;
                }

                if (!message.file.Contains(AutoGeneratedFolder + "/builder_"))
                {
                    continue;
                }

                Info($"Removed problem generated file at path {message.file}");

                File.Delete(message.file);
            }
            DebugInfo($"Finish check for problem generated files");
        }

        public void Refresh()
        {
            if(DisabledAutoRefreshing)
            {
                DebugInfo("Auto refreshing disabled");
                return;
            }

            var validators = new Dictionary<Type, IRegistrationValidator>()
            {
                [typeof(ContainerRegistrationDirect)] = new DirectRegistrationValidator(),
                [typeof(ContainerRegistrationMethod)] = new MethodRegistrationValidator()
            };

            var generators = new Dictionary<Type, ICodeRegistrationGenerator>()
            {
                [typeof(ContainerRegistrationDirect)] = new DirectCodeRegistrationGenerator(),
                [typeof(ContainerRegistrationMethod)] = new MethodCodeRegistrationGenerator()
            };

            var validator = new ContainerDependencyValidator(validators);
            var generator = new StatorCodeGenerator(validator, generators);

            var factoryBaseType = typeof(ContainerFactory);
            var factoryTypes = AppDomain.CurrentDomain
                .GetAssemblies()
                .SelectMany(a => a.GetTypes())
                .Where(t => factoryBaseType.IsAssignableFrom(t))
                .Where(t => t != factoryBaseType)
                .ToArray();

            Directory.CreateDirectory(PathToGenerate);

            var files = new List<string>();
            DebugInfo("Begin refreshing auto generated files");
            foreach (var factoryType in factoryTypes)
            {
                DebugInfo($"Begin generate code for `{factoryType}` type");
                var code = generator.Generate(factoryType);

                var path = Path.Combine(PathToGenerate, "builder_" + factoryType.GetTypeSafeName() + ".cs");
                DebugInfo($"Generated code for `{factoryType}` type, file: {path}");
                files.Add(path);
                if (File.Exists(path))
                {
                    var oldCode = File.ReadAllText(path);
                    if (!string.Equals(code, oldCode))
                    {
                        Info($"Code for `{factoryType}` type will rewrite");
                        File.WriteAllText(path, code);
                    }
                    else
                    {
                        DebugInfo($"Generated code for `{factoryType}` type equal old code. Skippig.");
                    }
                }
                else
                {
                    Info($"Code for `{factoryType}` type will write in file: {path}");
                    File.WriteAllText(path, code);
                }
            }

            var allFiles = Directory.GetFiles(PathToGenerate, "*.cs")
                .Select(f => Path.Combine(PathToGenerate, f));

            var fileForDelete = allFiles.Except(files);
            foreach (var deletingFile in fileForDelete)
            {
                Info($"Remove old file {fileForDelete}");
                File.Delete(deletingFile);
            }

            AssetDatabase.Refresh();

            DebugInfo($"Finish generating code");
        }

        private void DebugInfo(string info)
        {
            if(EnableDebugging)
            {
                Debug.Log("<color=blue>[STATOR:DEBUG]</color> " + info);
            }
        }

        private void Info(string info)
        {
            Debug.Log("<color=blue>[STATOR:INFO]</color> " + info);
        }
    }
}